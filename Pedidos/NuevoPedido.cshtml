@{
    var Usuario = WebSecurity.CurrentUserName;
    
    Layout = "~/Inicio/_ConfluenciaLayout.cshtml";
    var db = Database.Open("IntranetConnectionNew");
    
    // Obteniendo lista de artículos (adaptado a tu sistema)
var articulos = db.Query("SELECT ID, CODIGO, DESCRIPCION, UNIDAD_MEDIDA FROM ARTICULOS WHERE ACTIVO = 1 ORDER BY DESCRIPCION");

    var mensaje = "";
    var tipoMensaje = "";
    var idPedido = 0;
    
    if(IsPost) {
        AntiForgery.Validate();
        
        try {
            // Obtener datos del formulario
            var apellidoNombre = Request.Form["apellidoNombre"];
            var celular = Request.Form["celular"];
            var articulo = Request.Form["articulo"];
            var cantidad = Request.Form["cantidad"].AsFloat();
            var destino = Request.Form["destino"];
            var localidad = Request.Form["localidad"];
            var corte = Request.Form["corte"];
            var usoHormigon = Request.Form["usoHormigon"];
            var bombaCinta = Request.Form["bombaCinta"];
            var condVenta = Request.Form["condVenta"];
            var observPlanta = Request.Form["observPlanta"];
            var observAdmin = Request.Form["observAdmin"];
            var codigo = Request.Form["codigo"].AsInt();
            var planta = Request.Form["planta"].AsInt();
            
            // Determinar el estado según los campos completados
            string estado = "CAMPOS FALTANTES";
            if (!string.IsNullOrEmpty(apellidoNombre) && !string.IsNullOrEmpty(celular) && 
                !string.IsNullOrEmpty(articulo) && !string.IsNullOrEmpty(destino) && 
                cantidad > 0) {
                estado = "LISTO PARA PLANTA";
            }
            
            // Insertar pedido con la estructura actual
            string sqlPedido = @"INSERT INTO PEDIDOS (
                                APELLIDO_NOMBRE, CELULAR, CANTIDAD, CORTE, ARTICULO, 
                                FECHA, HORA, COND_VENTA, USO_HORMIGON, BOMBA_CINTA, 
                                LOCALIDAD, DESTINO, OBSERV_PLANTA, OBSERV_ADMIN, 
                                CODIGO, PLANTA, ESTADO) 
                                VALUES (
                                @0, @1, @2, @3, @4, @5, @6, @7, @8, @9, 
                                @10, @11, @12, @13, @14, @15, @16); 
                                SELECT SCOPE_IDENTITY();";
            
            DateTime fechaActual = DateTime.Now;
            string horaActual = fechaActual.ToString("HH:mm");
            
            idPedido = db.QueryValue(sqlPedido, 
                apellidoNombre, celular, cantidad, corte, articulo,
                fechaActual, horaActual, condVenta, usoHormigon, bombaCinta,
                localidad, destino, observPlanta, observAdmin,
                codigo, planta, estado);
            
            // Registrar en historial de estados (si existe esa tabla)
            if (db.QueryValue("SELECT OBJECT_ID('PEDIDOS_ESTADOS')") != null) {
                int idUsuario = 0;
                if (!string.IsNullOrEmpty(Usuario)) {
                    idUsuario = db.QueryValue("SELECT ID FROM USERS_TABLE WHERE LOWER(Usuario) = LOWER(@0)", Usuario) ?? 0;
                }
                
                db.Execute(@"INSERT INTO PEDIDOS_ESTADOS (IDPEDIDO, ESTADO, FECHA_CAMBIO, USUARIO_CAMBIO) 
                             VALUES (@0, @1, @2, @3)", 
                           idPedido, estado, DateTime.Now, idUsuario);
            }
            
            mensaje = "Pedido creado correctamente con ID: " + idPedido;
            tipoMensaje = "success";
        }
        catch (Exception ex) {
            mensaje = "Error al crear el pedido: " + ex.Message;
            tipoMensaje = "danger";
        }
    }
}

<div class="d-flex mb-2">
    <span class="fa-stack me-2 ms-n1">
        <i class="fas fa-circle fa-stack-2x text-300"></i>
        <i class="fa-inverse fa-stack-1x text-primary fas fa-cart-plus"></i>
    </span>
    <div class="col">
        <h5 class="mb-0 text-primary position-relative">
            <span class="bg-200 dark__bg-1100 pe-3">Nuevo Pedido</span>
            <span class="border position-absolute top-50 translate-middle-y w-100 start-0 z-n1"></span>
        </h5>
        <p class="mb-0">Complete la información del pedido</p>
    </div>
</div>

@if (!string.IsNullOrEmpty(mensaje)) {
    <div class="alert alert-@tipoMensaje alert-dismissible fade show" role="alert">
        <strong>@(tipoMensaje == "success" ? "¡Éxito!" : "¡Error!")</strong> @mensaje
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    
    if (tipoMensaje == "success") {
        <div class="mb-3">
            <a href="~/Pedidos/Index.cshtml" class="btn btn-falcon-primary me-2">
                <i class="fas fa-list me-1"></i>Volver a la lista
            </a>
            @if (idPedido > 0) {
                <a href="~/Pedidos/EditarPedido.cshtml?id=@idPedido" class="btn btn-falcon-success me-2">
                    <i class="fas fa-edit me-1"></i>Editar este pedido
                </a>
                <a href="~/Pedidos/NuevoPedido.cshtml" class="btn btn-falcon-info">
                    <i class="fas fa-plus me-1"></i>Crear otro pedido
                </a>
            }
        </div>
    }
}

<form method="post" id="formPedido" class="needs-validation" novalidate>
    @AntiForgery.GetHtml()
    
    <div class="card mb-3">
        <div class="card-header bg-light">
            <h6 class="mb-0">Información General</h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label" for="apellidoNombre">Cliente *</label>
                    <input type="text" class="form-control" id="apellidoNombre" name="apellidoNombre" required>
                    <div class="invalid-feedback">Este campo es obligatorio</div>
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="celular">Teléfono de Contacto *</label>
                    <input type="text" class="form-control" id="celular" name="celular" required>
                    <div class="invalid-feedback">Este campo es obligatorio</div>
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="localidad">Localidad</label>
                    <input type="text" class="form-control" id="localidad" name="localidad">
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="destino">Destino *</label>
                    <input type="text" class="form-control" id="destino" name="destino" required>
                    <div class="invalid-feedback">Este campo es obligatorio</div>
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="condVenta">Condición de Venta</label>
                    <input type="text" class="form-control" id="condVenta" name="condVenta">
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="codigo">Código</label>
                    <input type="number" class="form-control" id="codigo" name="codigo" value="0">
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header bg-light">
            <h6 class="mb-0">Detalles del Pedido</h6>
        </div> 
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label" for="articulo">Artículo *</label>
<select class="form-select" id="articulo" name="articulo" required>
    <option value="">Seleccione un artículo</option>
    @foreach (var art in articulos) {
        <option value="@art.CODIGO">@art.DESCRIPCION (@art.CODIGO) - @art.UNIDAD_MEDIDA</option>
    }
</select>
                    <div class="invalid-feedback">Este campo es obligatorio</div>
                </div>
                <div class="col-md-4">
                    <label class="form-label" for="cantidad">Cantidad *</label>
                    <input type="number" class="form-control" id="cantidad" name="cantidad" min="0.01" step="0.01" required>
                    <div class="invalid-feedback">Este campo es obligatorio</div>
                </div>
                <div class="col-md-4">
                    <label class="form-label" for="corte">Corte</label>
                    <input type="text" class="form-control" id="corte" name="corte">
                </div>
                <div class="col-md-4">
                    <label class="form-label" for="usoHormigon">Uso Hormigón</label>
                    <input type="text" class="form-control" id="usoHormigon" name="usoHormigon">
                </div>
                <div class="col-md-4">
                    <label class="form-label" for="bombaCinta">Bomba/Cinta</label>
                    <input type="text" class="form-control" id="bombaCinta" name="bombaCinta">
                </div>
                <div class="col-md-4">
                    <label class="form-label" for="planta">Planta</label>
                    <input type="number" class="form-control" id="planta" name="planta" value="1">
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header bg-light">
            <h6 class="mb-0">Observaciones</h6>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label" for="observPlanta">Observaciones para Planta</label>
                    <textarea class="form-control" id="observPlanta" name="observPlanta" rows="3"></textarea>
                </div>
                <div class="col-md-6">
                    <label class="form-label" for="observAdmin">Observaciones Administrativas</label>
                    <textarea class="form-control" id="observAdmin" name="observAdmin" rows="3"></textarea>
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-between mb-3">
        <a href="~/Pedidos/Index.cshtml" class="btn btn-falcon-default">
            <i class="fas fa-arrow-left me-1"></i>Cancelar
        </a>
        <button type="submit" class="btn btn-falcon-success">
            <i class="fas fa-save me-1"></i>Guardar Pedido
        </button>
    </div>
</form>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Inicializar Select2
            $('#articulo').select2({
                theme: 'bootstrap-5',
                placeholder: "Seleccione un artículo",
                allowClear: true
            });
            
            // Validación del formulario
            $('#formPedido').submit(function(event) {
                if (!this.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                $(this).addClass('was-validated');
            });
            
            // Validación en tiempo real
            function setupRealTimeValidation() {
                $('.form-control, .form-select').on('blur change', function() {
                    const $this = $(this);
                    if ($this.prop('required') && !$this.val()) {
                        $this.addClass('is-invalid');
                    } else {
                        $this.removeClass('is-invalid');
                    }
                });
            }

            // Autocompletar cliente desde API
            function setupClienteAutocomplete() {
                $('#apellidoNombre').autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: "/Pedidos/Methods/ClientesAutocomplete.cshtml",
                            dataType: "json",
                            data: { term: request.term },
                            success: function(data) {
                                response(data);
                            }
                        });
                    },
                    minLength: 2,
                    select: function(event, ui) {
                        $('#celular').val(ui.item.telefono);
                        $('#localidad').val(ui.item.localidad);
                    }
                });
            }

            // Mejorar visual feedback
            function setupVisualFeedback() {
                $('#formPedido').on('change', 'input, select, textarea', function() {
                    $(this).closest('.form-group').addClass('was-changed');
                });
            }

            // Guardar borrador automáticamente
            let formTimer;
            $('#formPedido').on('change', 'input, select, textarea', function() {
                clearTimeout(formTimer);
                formTimer = setTimeout(function() {
                    // Guardar en localStorage
                    saveFormDraft();
                    
                    // Mostrar indicador
                    showSavedIndicator();
                }, 2000);
            });

            // Guardar borrador
            function saveFormDraft() {
                const formData = $('#formPedido').serializeArray();
                const draftData = {};
                
                // Convert to object
                $.each(formData, function(index, field) {
                    draftData[field.name] = field.value;
                });
                
                // Save to localStorage
                localStorage.setItem('pedidoDraft', JSON.stringify(draftData));
            }

            // Mostrar indicador de guardado
            function showSavedIndicator() {
                const $indicator = $('<div class="saved-indicator">Borrador guardado</div>');
                $('body').append($indicator);
                
                $indicator.fadeIn(300).delay(2000).fadeOut(300, function() {
                    $(this).remove();
                });
            }
            
            // Inicializar las funciones
            setupRealTimeValidation();
            //setupClienteAutocomplete(); // Comentado porque puede requerir jQuery UI
            setupVisualFeedback();
        });
    </script>
}